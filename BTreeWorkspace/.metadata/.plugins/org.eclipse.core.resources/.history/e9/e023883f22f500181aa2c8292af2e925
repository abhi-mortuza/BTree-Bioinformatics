/**
 * 
 * 
 *
 * @param <T>
 */
public class BTreeNode<T> {

	private int maxDegree;	//max elements in node
	private int minDegree;	//min elements in node
	private BTreeNode<T> parentNode = null;
	private int parentIndex = 0;
	private boolean isRoot;
	
	// size should probably be max+1 to allow merging then promoting.
	private T [] values = null;		// size set at runtime based on degree, can have null elements.
	
	// element 0 is left of values[0]
	// element subTrees[size] is right of values[size-1]
	private BTreeNode<T>[] subTrees = null; //slots for subtrees of size = values.length + 1
	private int numValues = 0;		// current number of values in this node
	private boolean isLeaf;        	// stores if this is a leaf or not
	
	
	/**
	 * 
	 * @param maxDeg
	 * @param minDeg
	 */
	public BTreeNode(int maxDeg, int minDeg)
	{
		//TODO
	}
	
	/**
	 * 
	 * @return if it is a leaf	
	 */
	public boolean leaf()           
	{
		return isLeaf;
	}

	public boolean getIsRoot()
	{
		return isRoot;
	}
	
	public void setIsRoot(boolean root)
	{
		isRoot = root;
	}
	
	public T maxKey()
	{
		return null;//TODO
	}
	
	public T minKey()
	{
		return null;//TODO
	}
	
	public BTreeNode<T> getParentNode()
	{
		return this.parentNode;
	}
	
	public int getParentIndex()
	{
		return this.parentIndex;
	}
	
	public void setParentNode(BTreeNode<T> pnt)
	{
		parentNode = pnt;
	}
	
	public void setParentIndex(int pnti)
	{
		parentIndex = pnti;
	}
	
	public void putObjectAtIndex(T obj)
	{
		//TODO
	}
	
	public int getSize()
	{
		return this.numValues;
	}
	
	public T getObjectAtIndex(int i)
	{
		return null;//TODO
	}
	
	public void removeObjectAtIndex(int i)
	{
		//TODO
	}

	public boolean contains(T key)
	{
		return false;
	}
}
